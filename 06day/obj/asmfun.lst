     1 00000000                                 ﻿;汇编函数定义，提供给C语言调用
     2 00000000                                 [format "WCOFF"]
     3 00000000                                 [bits 32]		;制作32位模式的机器语言
     4 00000000                                 [INSTRSET "i486p"]	;使用到486为止的指令集
     5 00000000                                 
     6 00000000                                 [file "asmfun.asm"]	;制作目标文件信息
     7 00000000                                 	global	_io_hlt, _write_mem8, _io_cli
     8 00000000                                 	global	_io_in8, _io_in16, io_in32
     9 00000000                                 	global	_io_out8, io_out16, io_out32
    10 00000000                                 	global	_io_load_eflags, _io_store_eflags
    11 00000000                                 	global _load_gdtr, _load_idtr
    12 00000000                                 ;实际函数
    13                                          [section .text]
    14 00000000                                 _io_hlt:
    15 00000000 F4                              	hlt
    16 00000001 C3                              	ret
    17 00000002                                 	
    18 00000002                                 _write_mem8;	;_write_mem8(int addr, int data)
    19 00000002 8B 4C 24 04                     	mov	ecx,	[esp+4]
    20 00000006 8A 44 24 08                     	mov	al,		[esp+8]
    21 0000000A 88 01                           	mov	[ecx],	al
    22 0000000C C3                              	ret
    23 0000000D                                 _io_cli:	;void io_cli(void)	清除中断标记位
    24 0000000D FA                              	cli
    25 0000000E C3                              	ret
    26 0000000F                                 	
    27 0000000F                                 _io_in8:	;int io_in8(int port)
    28 0000000F 8B 54 24 04                     	mov	edx,	[esp+4]
    29 00000013 B8 00000000                     	mov	eax,	0
    30 00000018 EC                              	in	al,	dx
    31 00000019 C3                              	ret
    32 0000001A                                 _io_in16:
    33 0000001A 8B 54 24 04                     	mov	edx,	[esp+4]
    34 0000001E B8 00000000                     	mov	eax,	0
    35 00000023 66 ED                           	in	ax,	dx
    36 00000025 C3                              	ret
    37 00000026                                 _io_in32:
    38 00000026 8B 54 24 04                     	mov	edx,	[esp+4]
    39 0000002A ED                              	in	eax,	dx
    40 0000002B C3                              	ret
    41 0000002C                                 _io_out8:	;io_out8(int port, int data)
    42 0000002C 8B 54 24 04                     	mov	edx,	[esp+4]
    43 00000030 8A 44 24 08                     	mov	al,	[esp+8]
    44 00000034 EE                              	out 	dx,	al
    45 00000035 C3                              	ret
    46 00000036                                 _io_out16:
    47 00000036 8B 54 24 04                     	mov	edx,	[esp+4]
    48 0000003A 66 8B 44 24 08                  	mov	ax,	[esp+8]
    49 0000003F 66 EF                           	out	dx,	ax
    50 00000041 C3                              	ret
    51 00000042                                 _io_out32:
    52 00000042 8B 54 24 04                     	mov	edx,	[esp+4]
    53 00000046 8B 44 24 08                     	mov	eax,	[esp+8]
    54 0000004A EF                              	out	dx,	eax
    55 0000004B C3                              	ret
    56 0000004C                                 _io_load_eflags:	;io_load_eflags(void)
    57 0000004C 9C                              	pushfd		;指push eflags寄存器，此操作会将eflags压入栈中
    58 0000004D 58                              	pop	eax	;将栈顶元素弹出，放入eax中
    59 0000004E C3                              	ret
    60 0000004F                                 _io_store_eflags:	;void io_store_eflags(int eflags)
    61 0000004F 8B 44 24 04                     	mov	eax,	[esp+4]
    62 00000053 50                              	push	eax
    63 00000054 9D                              	popfd		;将栈顶值弹出放入eflags中
    64 00000055 C3                              	ret
    65 00000056                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    66 00000056 66 8B 44 24 04                  	MOV	AX,[ESP+4]		; limit
    67 0000005B 66 89 44 24 06                  	MOV	[ESP+6],AX
    68 00000060 0F 01 54 24 06                  	LGDT	[ESP+6]
    69 00000065 C3                              	RET
    70 00000066                                 
    71 00000066                                 _load_idtr:		; void load_idtr(int limit, int addr);
    72 00000066 66 8B 44 24 04                  	MOV	AX,[ESP+4]		; limit
    73 0000006B 66 89 44 24 06                  	MOV	[ESP+6],AX
    74 00000070 0F 01 5C 24 06                  	LIDT	[ESP+6]
    75 00000075 C3                              	RET
    76 00000076                                 
    77 00000076                                 
    78 00000076                                 
